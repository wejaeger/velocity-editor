/* Generated By:JJTree&JavaCC: Do not edit this line. VelocityParserTokenManager.java */
package com.tsi.netbeans.modules.languages.velocity.jcclexer;
import com.tsi.netbeans.modules.languages.velocity.jcclexer.node.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EmptyStackException;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;

/** Token Manager. */
public class VelocityParserTokenManager implements VelocityParserConstants
{
    private int fileDepth = 0;

    private int lparen = 0;
    private int rparen = 0;

    private Stack<Hashtable<String, Integer>> stateStack = new Stack<Hashtable<String, Integer>>();
    private boolean debugPrint = false;

    private boolean inReference;
    private boolean inComment;
    private boolean inUnparsed;
    public  boolean inSet;
    public  boolean inDirective;

    /**
     * Retrieves the current lexer state.
     *
     * @return the current lexer state.
     */
    public int getCurrLexState()
    {
       return(curLexState);
    }

    /**
     *  pushes the current state onto the 'state stack',
     *  and maintains the parens counts
     *  public because we need it in PD & VM handling
     *
     *  @return boolean : success.  It can fail if the state machine
     *     gets messed up (do don't mess it up :)
     */
    public boolean stateStackPop()
    {
        Hashtable<String, Integer> h;

        try
        {
            h = stateStack.pop();
        }
        catch (EmptyStackException e)
        {
            lparen=0;
            SwitchTo(DEFAULT);
            return(false);
        }

        if (debugPrint)
            System.out.println(
                " stack pop (" + stateStack.size() + ") : lparen=" +
                    h.get("lparen").intValue() +
                        " newstate=" + h.get("lexstate").intValue());

        lparen = h.get("lparen").intValue();
        rparen = h.get("rparen").intValue();

        SwitchTo(h.get("lexstate").intValue());

        return(true);
    }

    /**
     *  pops a state off the stack, and restores paren counts
     *
     *  @return boolean : success of operation
     */
    public boolean stateStackPush()
    {
        if (debugPrint)
            System.out.println(" (" + stateStack.size() + ") pushing cur state : " + curLexState);

        final Hashtable<String, Integer> h = new Hashtable<String, Integer>();

        h.put("lexstate", new Integer( curLexState ) );
        h.put("lparen", new Integer( lparen ));
        h.put("rparen", new Integer( rparen ));

        lparen = 0;

        stateStack.push(h);

        return(true);
    }

    /**
     *  Clears all state variables, resets to
     *  start values, clears stateStack.  Call
     *  before parsing.
     */
    public void clearStateVars()
    {
        stateStack.clear();

        lparen = 0;
        rparen = 0;
        inReference = false;
        inDirective = false;
        inComment = false;
        inUnparsed = false;
        inSet = false;

        return;
    }

    /**
     *  handles the dropdown logic when encountering a RPAREN
     */
    private void RPARENHandler()
    {
        /*
         *  Ultimately, we want to drop down to the state below
         *  the one that has an open (if we hit bottom (DEFAULT),
         *  that's fine. It's just text schmoo.
         */

        boolean closed = false;

        if (inComment || inUnparsed)
            closed = true;

        while (!closed)
        {
            /*
             * look at current state.  If we haven't seen a lparen
             * in this state then we drop a state, because this
             * lparen clearly closes our state
             */
            if (lparen > 0)
            {
                /*
                 *  if rparen + 1 == lparen, then this state is closed.
                 * Otherwise, increment and keep parsing
                 */
                 if(lparen == rparen + 1)
                 {
                    stateStackPop();
                 }
                 else
                 {
                    rparen++;
                 }

                 closed = true;
            }
            else
            {
                /*
                 * now, drop a state
                 */
                if(!stateStackPop())
                    break;
            }
        }
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000000L) != 0L)
            return 107;
         if ((active0 & 0x180000400L) != 0L)
         {
            jjmatchedKind = 66;
            return 65;
         }
         if ((active0 & 0x40L) != 0L)
            return 67;
         if ((active0 & 0x160000L) != 0L)
            return 7;
         if ((active0 & 0x10L) != 0L)
            return 60;
         if ((active0 & 0x4000000000000L) != 0L)
            return 52;
         return -1;
      case 1:
         if ((active0 & 0x400L) != 0L)
            return 65;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
            return 65;
         }
         if ((active0 & 0x20000L) != 0L)
            return 5;
         return -1;
      case 2:
         if ((active0 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 2;
            return 65;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 19;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x80000000L) != 0L)
            return 65;
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
            return 65;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x160000L);
      case 37:
         return jjStopAtPos(0, 38);
      case 40:
         return jjStopAtPos(0, 8);
      case 42:
         return jjStopAtPos(0, 36);
      case 43:
         return jjStopAtPos(0, 35);
      case 44:
         return jjStopAtPos(0, 3);
      case 45:
         return jjStartNfaWithStates_0(0, 34, 107);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 47:
         return jjStopAtPos(0, 37);
      case 58:
         return jjStopAtPos(0, 5);
      case 61:
         return jjStartNfaWithStates_0(0, 50, 52);
      case 91:
         return jjStopAtPos(0, 1);
      case 93:
         return jjStopAtPos(0, 2);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 123:
         return jjStartNfaWithStates_0(0, 6, 67);
      case 125:
         return jjStopAtPos(0, 7);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 42:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 5);
         break;
      case 46:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 65);
         break;
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 65);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 65);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 107;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(102, 103);
                  else if (curChar == 46)
                     jjCheckNAdd(60);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 97);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddTwoStates(93, 95);
                  }
                  break;
               case 7:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(0, 5);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(6, 9);
                  else if (curChar == 36)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddTwoStates(75, 76);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(60);
                  else if (curChar == 33)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 52;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 39)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 34)
                     jjCheckNAddStates(13, 15);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 41)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAddStates(16, 18);
                  }
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 56;
                  else if (curChar == 62)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if (curChar == 38)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 7;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 1:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 3:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 8:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 11:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAddStates(13, 15);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 14:
                  if (curChar == 34 && kind > 30)
                     kind = 30;
                  break;
               case 16:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 22);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 19:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 26:
                  if (curChar == 32)
                     jjAddStates(23, 24);
                  break;
               case 27:
                  if (curChar == 10)
                     jjCheckNAddStates(13, 15);
                  break;
               case 28:
                  if (curChar == 39)
                     jjCheckNAddStates(10, 12);
                  break;
               case 29:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 31:
                  if (curChar == 32)
                     jjAddStates(25, 26);
                  break;
               case 32:
                  if (curChar == 10)
                     jjCheckNAddStates(10, 12);
                  break;
               case 33:
                  if (curChar == 39 && kind > 30)
                     kind = 30;
                  break;
               case 34:
                  if ((0x2400L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 35:
                  if (curChar == 10 && kind > 33)
                     kind = 33;
                  break;
               case 36:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 38 && kind > 39)
                     kind = 39;
                  break;
               case 39:
                  if (curChar == 38 && kind > 41)
                     kind = 41;
                  break;
               case 40:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 46:
                  if (curChar == 60 && kind > 43)
                     kind = 43;
                  break;
               case 47:
                  if (curChar == 61 && kind > 44)
                     kind = 44;
                  break;
               case 48:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 62 && kind > 45)
                     kind = 45;
                  break;
               case 50:
                  if (curChar == 61 && kind > 46)
                     kind = 46;
                  break;
               case 51:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 61 && kind > 47)
                     kind = 47;
                  break;
               case 53:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 56:
                  if (curChar == 61 && kind > 48)
                     kind = 48;
                  break;
               case 57:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 33 && kind > 49)
                     kind = 49;
                  break;
               case 59:
                  if (curChar == 46)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(60, 61);
                  break;
               case 62:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(63);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 72:
                  if (curChar == 36 && kind > 14)
                     kind = 14;
                  break;
               case 74:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 76:
                  if (curChar == 33 && kind > 15)
                     kind = 15;
                  break;
               case 77:
                  if (curChar != 36)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(75, 76);
                  break;
               case 92:
                  if (curChar == 45)
                     jjCheckNAddStates(6, 9);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(93, 95);
                  break;
               case 94:
                  if (curChar == 46 && kind > 61)
                     kind = 61;
                  break;
               case 95:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 97);
                  break;
               case 97:
                  if (curChar != 46)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(98, 99);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(98, 99);
                  break;
               case 100:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(101);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(101);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 104:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(105);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(105);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddStates(0, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (kind > 19)
                     kind = 19;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     jjCheckNAdd(65);
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(29, 32);
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 67;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if (curChar == 110)
                     jjAddStates(33, 34);
                  else if (curChar == 103)
                     jjAddStates(35, 36);
                  else if (curChar == 108)
                     jjAddStates(37, 38);
                  else if (curChar == 111)
                     jjAddStates(39, 41);
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 124)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  break;
               case 6:
                  if (kind > 16)
                     kind = 16;
                  break;
               case 13:
                  jjCheckNAddStates(13, 15);
                  break;
               case 15:
                  if (curChar == 92)
                     jjAddStates(42, 47);
                  break;
               case 16:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 21:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 29:
                  jjAddStates(10, 12);
                  break;
               case 30:
                  if (curChar == 92)
                     jjAddStates(25, 26);
                  break;
               case 38:
                  if (curChar == 124 && kind > 40)
                     kind = 40;
                  break;
               case 41:
                  if (curChar == 100 && kind > 41)
                     kind = 41;
                  break;
               case 42:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 124 && kind > 42)
                     kind = 42;
                  break;
               case 45:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 54:
                  if (curChar == 113 && kind > 47)
                     kind = 47;
                  break;
               case 55:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 61:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 64:
               case 65:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(65);
                  break;
               case 66:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 69:
                  if (curChar == 125 && kind > 67)
                     kind = 67;
                  break;
               case 70:
                  if (curChar == 92)
                     jjCheckNAddStates(29, 32);
                  break;
               case 71:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 73:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 75:
                  if (curChar == 92)
                     jjAddStates(50, 51);
                  break;
               case 78:
                  if (curChar == 111)
                     jjAddStates(39, 41);
                  break;
               case 79:
                  if (curChar == 114 && kind > 39)
                     kind = 39;
                  break;
               case 80:
                  if (curChar == 114 && kind > 40)
                     kind = 40;
                  break;
               case 81:
                  if (curChar == 114 && kind > 42)
                     kind = 42;
                  break;
               case 82:
                  if (curChar == 108)
                     jjAddStates(37, 38);
                  break;
               case 83:
                  if (curChar == 116 && kind > 43)
                     kind = 43;
                  break;
               case 84:
                  if (curChar == 101 && kind > 44)
                     kind = 44;
                  break;
               case 85:
                  if (curChar == 103)
                     jjAddStates(35, 36);
                  break;
               case 86:
                  if (curChar == 116 && kind > 45)
                     kind = 45;
                  break;
               case 87:
                  if (curChar == 101 && kind > 46)
                     kind = 46;
                  break;
               case 88:
                  if (curChar == 110)
                     jjAddStates(33, 34);
                  break;
               case 89:
                  if (curChar == 101 && kind > 48)
                     kind = 48;
                  break;
               case 90:
                  if (curChar == 116 && kind > 49)
                     kind = 49;
                  break;
               case 91:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 99:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 103:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(13, 15);
                  break;
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 107 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x160000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x20000L) != 0L)
            return 0;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_7(0x160000L);
      case 42:
         return jjMoveStringLiteralDfa1_7(0x4000000L);
      default :
         return jjMoveNfa_7(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_7(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 42:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_7(1, 17, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_7(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_7(0, active0);
}
private int jjMoveStringLiteralDfa2_7(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_7(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_7(1, active0);
}
private int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 36)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddTwoStates(11, 12);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 4:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 8:
                  if (curChar == 36 && kind > 14)
                     kind = 14;
                  break;
               case 10:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 33 && kind > 15)
                     kind = 15;
                  break;
               case 13:
                  if (curChar != 36)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (kind > 19)
                     kind = 19;
                  break;
               case 3:
                  if (curChar == 92)
                     jjCheckNAddStates(56, 59);
                  break;
               case 1:
                  if (kind > 16)
                     kind = 16;
                  break;
               case 7:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(60, 61);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x160000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x20000L) != 0L)
            return 0;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_5(0x160000L);
      default :
         return jjMoveNfa_5(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 42:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_5(1, 17, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_5(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_5(0, active0);
}
private int jjMoveStringLiteralDfa2_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_5(1, active0);
}
private int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 143;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(62, 67);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(68, 71);
                  else if (curChar == 36)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddTwoStates(37, 38);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(28);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 4:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 14:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(72, 73);
                  break;
               case 15:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 27:
                  if (curChar == 46)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(31);
                  break;
               case 34:
                  if (curChar == 36 && kind > 14)
                     kind = 14;
                  break;
               case 36:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar == 33 && kind > 15)
                     kind = 15;
                  break;
               case 39:
                  if (curChar != 36)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(37, 38);
                  break;
               case 42:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(74, 76);
                  break;
               case 43:
                  if ((0x2400L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 44:
                  if (curChar == 10 && kind > 51)
                     kind = 51;
                  break;
               case 45:
               case 62:
                  if (curChar == 13)
                     jjCheckNAdd(44);
                  break;
               case 53:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(77, 79);
                  break;
               case 54:
                  if ((0x2400L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 55:
                  if (curChar == 10 && kind > 57)
                     kind = 57;
                  break;
               case 56:
               case 100:
                  if (curChar == 13)
                     jjCheckNAdd(55);
                  break;
               case 61:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(80, 82);
                  break;
               case 99:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(83, 85);
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(86, 87);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(88, 89);
                  break;
               case 128:
                  if (curChar == 45)
                     jjCheckNAddStates(68, 71);
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(129, 131);
                  break;
               case 130:
                  if (curChar == 46 && kind > 61)
                     kind = 61;
                  break;
               case 131:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(132, 133);
                  break;
               case 133:
                  if (curChar != 46)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(134, 135);
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(134, 135);
                  break;
               case 136:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(137);
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(137);
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(138, 139);
                  break;
               case 140:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(141);
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(141);
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddStates(62, 67);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddTwoStates(119, 120);
                  }
                  else if (curChar == 123)
                     jjAddStates(90, 91);
                  else if (curChar == 92)
                     jjCheckNAddStates(92, 95);
                  if (curChar == 105)
                     jjAddStates(96, 97);
                  else if (curChar == 123)
                     jjAddStates(98, 105);
                  else if (curChar == 101)
                     jjAddStates(106, 108);
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 2:
                  if (kind > 19)
                     kind = 19;
                  break;
               case 1:
                  if (kind > 16)
                     kind = 16;
                  break;
               case 6:
                  if (curChar == 104 && kind > 52)
                     kind = 52;
                  break;
               case 7:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 111)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 17:
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 20:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 112 && kind > 58)
                     kind = 58;
                  break;
               case 24:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(109, 110);
                  break;
               case 32:
                  if (curChar == 92)
                     jjCheckNAddStates(92, 95);
                  break;
               case 33:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 35:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if (curChar == 92)
                     jjAddStates(111, 112);
                  break;
               case 40:
                  if (curChar == 101)
                     jjAddStates(106, 108);
                  break;
               case 41:
                  if (curChar != 100)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(74, 76);
                  break;
               case 46:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 47:
                  if (curChar == 102 && kind > 56)
                     kind = 56;
                  break;
               case 48:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar != 101)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddStates(77, 79);
                  break;
               case 57:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 58:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 123)
                     jjAddStates(98, 105);
                  break;
               case 60:
                  if (curChar != 125)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(80, 82);
                  break;
               case 63:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 64:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 125 && kind > 52)
                     kind = 52;
                  break;
               case 67:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 75:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 125 && kind > 54)
                     kind = 54;
                  break;
               case 81:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 125 && kind > 55)
                     kind = 55;
                  break;
               case 89:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 125 && kind > 56)
                     kind = 56;
                  break;
               case 92:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar != 125)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddStates(83, 85);
                  break;
               case 101:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 102:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 125 && kind > 58)
                     kind = 58;
                  break;
               case 106:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 105)
                     jjAddStates(96, 97);
                  break;
               case 111:
                  if (curChar == 101 && kind > 54)
                     kind = 54;
                  break;
               case 112:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 102 && kind > 55)
                     kind = 55;
                  break;
               case 118:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(119, 120);
                  break;
               case 119:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(119);
                  break;
               case 120:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(120);
                  break;
               case 121:
                  if (curChar == 123)
                     jjAddStates(90, 91);
                  break;
               case 122:
               case 123:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(123, 124);
                  break;
               case 124:
                  if (curChar == 125 && kind > 59)
                     kind = 59;
                  break;
               case 125:
               case 126:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(126, 127);
                  break;
               case 127:
                  if (curChar == 125 && kind > 67)
                     kind = 67;
                  break;
               case 135:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(113, 114);
                  break;
               case 139:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(115, 116);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 143 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x160000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x20000L) != 0L)
            return 0;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_6(0x160000L);
      case 93:
         return jjMoveStringLiteralDfa1_6(0x8000000L);
      default :
         return jjMoveNfa_6(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 42:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_6(1, 17, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_6(active0, 0x40000L);
      case 93:
         return jjMoveStringLiteralDfa2_6(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_6(0, active0);
}
private int jjMoveStringLiteralDfa2_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 27);
         break;
      case 91:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_6(1, active0);
}
private int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 36)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddTwoStates(11, 12);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 4:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 8:
                  if (curChar == 36 && kind > 14)
                     kind = 14;
                  break;
               case 10:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 33 && kind > 15)
                     kind = 15;
                  break;
               case 13:
                  if (curChar != 36)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (kind > 19)
                     kind = 19;
                  break;
               case 3:
                  if (curChar == 92)
                     jjCheckNAddStates(56, 59);
                  break;
               case 1:
                  if (kind > 16)
                     kind = 16;
                  break;
               case 7:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(60, 61);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x600000L) != 0L)
            return 16;
         if ((active0 & 0x160000L) != 0L)
            return 35;
         return -1;
      case 1:
         if ((active0 & 0x20000L) != 0L)
            return 33;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
            return 36;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_3(0x160000L);
      case 92:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_3(0x200000L);
      default :
         return jjMoveNfa_3(12, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 42:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_3(1, 17, 33);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_3(active0, 0x40000L);
      case 92:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_3(1, 21, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, active0);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 36;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(29, 30);
                  else if (curChar == 35)
                     jjAddStates(117, 118);
                  if (curChar == 36)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  break;
               case 36:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(29, 30);
                  if (curChar == 36)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  break;
               case 12:
                  if ((0xffffffe7ffffffffL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(14);
                  }
                  else if (curChar == 35)
                     jjCheckNAddStates(119, 121);
                  else if (curChar == 36)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddTwoStates(29, 30);
                  }
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 35:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(6, 11);
                  break;
               case 3:
                  if (curChar == 32)
                     jjAddStates(122, 123);
                  break;
               case 4:
                  if (curChar == 40 && kind > 13)
                     kind = 13;
                  break;
               case 13:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 14:
                  if ((0xffffffe7ffffffffL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(14);
                  break;
               case 17:
                  if (curChar == 35)
                     jjAddStates(117, 118);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(124, 125);
                  break;
               case 26:
                  if (curChar == 36 && kind > 14)
                     kind = 14;
                  break;
               case 28:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar == 33 && kind > 15)
                     kind = 15;
                  break;
               case 31:
                  if (curChar != 36)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 32:
                  if (curChar == 35)
                     jjCheckNAddStates(119, 121);
                  break;
               case 33:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(27, 28);
                  if (curChar == 92)
                     jjCheckNAddTwoStates(25, 26);
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 36:
                  if (curChar == 92)
                     jjAddStates(126, 127);
                  if (curChar == 92)
                     jjCheckNAddTwoStates(27, 28);
                  if (curChar == 92)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAdd(14);
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(128, 131);
                  if (curChar == 92)
                     jjAddStates(126, 127);
                  break;
               case 35:
                  if (kind > 19)
                     kind = 19;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 2:
                  if (curChar == 116)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (kind > 19)
                     kind = 19;
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 92)
                     jjAddStates(126, 127);
                  break;
               case 18:
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 125 && kind > 12)
                     kind = 12;
                  break;
               case 24:
                  if (curChar == 92)
                     jjCheckNAddStates(128, 131);
                  break;
               case 25:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 27:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if (curChar == 92)
                     jjAddStates(132, 133);
                  break;
               case 34:
                  if (kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
               case 14:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(14);
                  break;
               case 35:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 36 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x160000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x20000L) != 0L)
            return 0;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_8(0x160000L);
      case 42:
         return jjMoveStringLiteralDfa1_8(0x2000000L);
      default :
         return jjMoveNfa_8(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_8(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 42:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_8(1, 17, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_8(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_8(0, active0);
}
private int jjMoveStringLiteralDfa2_8(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_8(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_8(1, active0);
}
private int jjStartNfaWithStates_8(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_8(state, pos + 1);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 36)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddTwoStates(11, 12);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 4:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 8:
                  if (curChar == 36 && kind > 14)
                     kind = 14;
                  break;
               case 10:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 33 && kind > 15)
                     kind = 15;
                  break;
               case 13:
                  if (curChar != 36)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (kind > 19)
                     kind = 19;
                  break;
               case 3:
                  if (curChar == 92)
                     jjCheckNAddStates(56, 59);
                  break;
               case 1:
                  if (kind > 16)
                     kind = 16;
                  break;
               case 7:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(60, 61);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x160000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x20000L) != 0L)
            return 0;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_9(0x160000L);
      default :
         return jjMoveNfa_9(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_9(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 42:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_9(1, 17, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_9(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_9(0, active0);
}
private int jjMoveStringLiteralDfa2_9(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_9(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_9(1, active0);
}
private int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 17;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 4:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 7:
                  if (curChar == 10 && kind > 24)
                     kind = 24;
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if (curChar == 36 && kind > 14)
                     kind = 14;
                  break;
               case 13:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 33 && kind > 15)
                     kind = 15;
                  break;
               case 16:
                  if (curChar != 36)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     jjCheckNAddStates(134, 137);
                  break;
               case 2:
                  if (kind > 19)
                     kind = 19;
                  break;
               case 1:
                  if (kind > 16)
                     kind = 16;
                  break;
               case 10:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(72, 73);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 17 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x160000L) != 0L)
            return 29;
         if ((active0 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 71;
            return 15;
         }
         return -1;
      case 1:
         if ((active0 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
            return 15;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
            return 27;
         return -1;
      case 2:
         if ((active0 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
            return 15;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 19;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
            return 15;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 15;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_4(0x160000L);
      case 102:
         return jjMoveStringLiteralDfa1_4(0x100000000L);
      case 116:
         return jjMoveStringLiteralDfa1_4(0x80000000L);
      case 123:
         return jjStopAtPos(0, 73);
      case 125:
         return jjStopAtPos(0, 74);
      default :
         return jjMoveNfa_4(12, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 42:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_4(1, 17, 27);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_4(active0, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa2_4(active0, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa2_4(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_4(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_4(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa3_4(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_4(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_4(3, 31, 15);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_4(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_4(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_4(4, 32, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_4(3, active0, 0L);
}
private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 30;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  else if (curChar == 35)
                     jjCheckNAddStates(138, 140);
                  else if (curChar == 36)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddTwoStates(23, 24);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 29:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(6, 11);
                  break;
               case 3:
                  if (curChar == 32)
                     jjAddStates(122, 123);
                  break;
               case 4:
                  if (curChar == 40 && kind > 13)
                     kind = 13;
                  break;
               case 13:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 15:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 16:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 36 && kind > 14)
                     kind = 14;
                  break;
               case 22:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 33 && kind > 15)
                     kind = 15;
                  break;
               case 25:
                  if (curChar != 36)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 26:
                  if (curChar == 35)
                     jjCheckNAddStates(138, 140);
                  break;
               case 27:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(15);
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(141, 144);
                  break;
               case 29:
                  if (kind > 19)
                     kind = 19;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 2:
                  if (curChar == 116)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (kind > 19)
                     kind = 19;
                  break;
               case 14:
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(15);
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 18:
                  if (curChar == 92)
                     jjCheckNAddStates(141, 144);
                  break;
               case 19:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(145, 146);
                  break;
               case 28:
                  if (kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 28:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 30 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 71;
            return 38;
         }
         if ((active0 & 0x160000L) != 0L)
            return 50;
         if ((active0 & 0x10L) != 0L)
            return 72;
         return -1;
      case 1:
         if ((active0 & 0x20000L) != 0L)
            return 48;
         if ((active0 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
            return 38;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 19;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
            return 38;
         }
         return -1;
      case 3:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
            return 38;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 38;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_1(0x160000L);
      case 41:
         return jjStopAtPos(0, 11);
      case 44:
         return jjStopAtPos(0, 3);
      case 46:
         return jjMoveStringLiteralDfa1_1(0x10L);
      case 58:
         return jjStopAtPos(0, 5);
      case 91:
         return jjStopAtPos(0, 1);
      case 93:
         return jjStopAtPos(0, 2);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x100000000L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x80000000L);
      case 123:
         return jjStopAtPos(0, 6);
      case 125:
         return jjStopAtPos(0, 7);
      default :
         return jjMoveNfa_1(12, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 42:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(1, 17, 48);
         break;
      case 46:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(3, 31, 38);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(4, 32, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 73;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 50:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 72:
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(62, 63);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAddStates(147, 152);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAdd(14);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(62, 72);
                  else if (curChar == 45)
                     jjCheckNAddStates(153, 156);
                  else if (curChar == 35)
                     jjCheckNAddStates(157, 159);
                  else if (curChar == 36)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddTwoStates(44, 45);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(160, 162);
                  else if (curChar == 34)
                     jjCheckNAddStates(163, 165);
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(6, 11);
                  break;
               case 3:
                  if (curChar == 32)
                     jjAddStates(122, 123);
                  break;
               case 4:
                  if (curChar == 40 && kind > 13)
                     kind = 13;
                  break;
               case 13:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 14:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 34)
                     jjCheckNAddStates(163, 165);
                  break;
               case 16:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(163, 165);
                  break;
               case 17:
                  if (curChar == 34 && kind > 30)
                     kind = 30;
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(163, 165);
                  break;
               case 20:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(166, 169);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(163, 165);
                  break;
               case 22:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(163, 165);
                  break;
               case 29:
                  if (curChar == 32)
                     jjAddStates(132, 133);
                  break;
               case 30:
                  if (curChar == 10)
                     jjCheckNAddStates(163, 165);
                  break;
               case 31:
                  if (curChar == 39)
                     jjCheckNAddStates(160, 162);
                  break;
               case 32:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(160, 162);
                  break;
               case 34:
                  if (curChar == 32)
                     jjAddStates(170, 171);
                  break;
               case 35:
                  if (curChar == 10)
                     jjCheckNAddStates(160, 162);
                  break;
               case 36:
                  if (curChar == 39 && kind > 30)
                     kind = 30;
                  break;
               case 38:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 41:
                  if (curChar == 36 && kind > 14)
                     kind = 14;
                  break;
               case 43:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar == 33 && kind > 15)
                     kind = 15;
                  break;
               case 46:
                  if (curChar != 36)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(44, 45);
                  break;
               case 47:
                  if (curChar == 35)
                     jjCheckNAddStates(157, 159);
                  break;
               case 48:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 51:
                  if (curChar == 45)
                     jjCheckNAddStates(153, 156);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddTwoStates(52, 54);
                  break;
               case 53:
                  if (curChar == 46 && kind > 61)
                     kind = 61;
                  break;
               case 54:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar != 46)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if (curChar == 46)
                     jjCheckNAdd(62);
                  break;
               case 64:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(65);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(65);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 68:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(69);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAddStates(147, 152);
                  break;
               case 71:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(62, 72);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 50:
                  if (kind > 19)
                     kind = 19;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 72:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(38);
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(172, 175);
                  break;
               case 2:
                  if (curChar == 116)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (kind > 19)
                     kind = 19;
                  break;
               case 16:
                  jjCheckNAddStates(163, 165);
                  break;
               case 18:
                  if (curChar == 92)
                     jjAddStates(176, 181);
                  break;
               case 19:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(163, 165);
                  break;
               case 24:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(163, 165);
                  break;
               case 32:
                  jjAddStates(160, 162);
                  break;
               case 33:
                  if (curChar == 92)
                     jjAddStates(170, 171);
                  break;
               case 37:
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if (curChar == 92)
                     jjCheckNAddStates(172, 175);
                  break;
               case 40:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if (curChar == 92)
                     jjAddStates(182, 183);
                  break;
               case 49:
                  if (kind > 16)
                     kind = 16;
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(184, 185);
                  break;
               case 63:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(186, 187);
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 50:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(163, 165);
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(160, 162);
                  break;
               case 49:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 73 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x160000L) != 0L)
            return 29;
         if ((active0 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 71;
            return 15;
         }
         return -1;
      case 1:
         if ((active0 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
            return 15;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
            return 27;
         return -1;
      case 2:
         if ((active0 & 0x180000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 2;
            return 15;
         }
         if ((active0 & 0x40000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 19;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
            return 15;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 15;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_2(0x160000L);
      case 40:
         return jjStopAtPos(0, 8);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x100000000L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x80000000L);
      case 123:
         return jjStopAtPos(0, 73);
      case 125:
         return jjStopAtPos(0, 74);
      default :
         return jjMoveNfa_2(12, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 42:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(1, 17, 27);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_2(active0, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(3, 31, 15);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(4, 32, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_2(3, active0, 0L);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 30;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  else if (curChar == 35)
                     jjCheckNAddStates(138, 140);
                  else if (curChar == 36)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddTwoStates(23, 24);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 29:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(6, 11);
                  break;
               case 3:
                  if (curChar == 32)
                     jjAddStates(122, 123);
                  break;
               case 4:
                  if (curChar == 40 && kind > 13)
                     kind = 13;
                  break;
               case 13:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 15:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 16:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 36 && kind > 14)
                     kind = 14;
                  break;
               case 22:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 33 && kind > 15)
                     kind = 15;
                  break;
               case 25:
                  if (curChar != 36)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 26:
                  if (curChar == 35)
                     jjCheckNAddStates(138, 140);
                  break;
               case 27:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0xfffffff7ffffffffL & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(15);
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(141, 144);
                  break;
               case 29:
                  if (kind > 19)
                     kind = 19;
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 2:
                  if (curChar == 116)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 125)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 8:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (kind > 19)
                     kind = 19;
                  break;
               case 14:
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(15);
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 18:
                  if (curChar == 92)
                     jjCheckNAddStates(141, 144);
                  break;
               case 19:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(145, 146);
                  break;
               case 28:
                  if (kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 28:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 30 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   93, 95, 96, 97, 102, 103, 93, 96, 59, 102, 29, 30, 33, 13, 14, 15, 
   1, 2, 4, 13, 18, 14, 15, 26, 27, 31, 32, 68, 69, 71, 72, 73, 
   74, 89, 91, 86, 87, 83, 84, 79, 80, 81, 16, 17, 19, 21, 26, 27, 
   62, 63, 75, 76, 100, 101, 104, 105, 7, 8, 9, 10, 11, 12, 129, 131, 
   132, 133, 138, 139, 129, 132, 27, 138, 14, 15, 42, 43, 45, 53, 54, 56, 
   61, 43, 62, 99, 54, 100, 123, 124, 126, 127, 122, 125, 33, 34, 35, 36, 
   116, 117, 65, 73, 79, 87, 90, 97, 104, 109, 46, 51, 58, 30, 31, 37, 
   38, 136, 137, 140, 141, 18, 20, 6, 11, 35, 3, 4, 22, 23, 16, 17, 
   25, 26, 27, 28, 29, 30, 10, 11, 12, 13, 6, 11, 29, 19, 20, 21, 
   22, 23, 24, 52, 54, 55, 56, 66, 67, 52, 55, 61, 66, 6, 11, 50, 
   32, 33, 36, 16, 17, 18, 16, 21, 17, 18, 34, 35, 40, 41, 42, 43, 
   19, 20, 22, 24, 29, 30, 44, 45, 59, 60, 64, 65, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DIRECTIVE",
   "REFMOD2",
   "REFMODIFIER",
   "DEFAULT",
   "REFERENCE",
   "PRE_DIRECTIVE",
   "IN_UNPARSED_CONTENT",
   "IN_MULTI_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_SINGLE_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0x6fffffffcff03fffL, 0x78cL, 
};
static final long[] jjtoSkip = {
   0x30000000L, 0x1800L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x1800L, 
};
static final long[] jjtoMore = {
   0xfc000L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[143];
private final int[] jjstateSet = new int[286];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public VelocityParserTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public VelocityParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 143; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 10 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 3;
int defaultLexState = 3;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 76)
         {
            jjmatchedKind = 76;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 75)
         {
            jjmatchedKind = 75;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 75)
         {
            jjmatchedKind = 75;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 75)
         {
            jjmatchedKind = 75;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 76)
         {
            jjmatchedKind = 76;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 75 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * push every terminator character back into the stream
         */
        input_stream.backup(1);

        inReference = false;

        if (debugPrint)
            System.out.print("REF_TERM :");

        stateStackPop();
         break;
      case 76 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (debugPrint)
            System.out.print("DIRECTIVE_TERM :");

        input_stream.backup(1);
        inDirective = false;
        stateStackPop();
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 14 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (!inComment && !inUnparsed)
        {
            /*
             * if we find ourselves in REFERENCE, we need to pop down
             * to end the previous ref
             */
            if (curLexState == REFERENCE)
            {
                inReference = false;
                stateStackPop();
            }

            inReference = true;

            if (debugPrint)
                System.out.print( "$  : going to " + REFERENCE);

            stateStackPush();
            SwitchTo(REFERENCE);
        }
         break;
      case 15 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (!inComment && !inUnparsed)
        {
            /*
             * if we find ourselves in REFERENCE, we need to pop down
             * to end the previous ref
             */
            if (curLexState == REFERENCE)
            {
                inReference = false;
                stateStackPop();
            }

            inReference = true;

            if (debugPrint)
                System.out.print( "$!  : going to " + REFERENCE);

            stateStackPush();
            SwitchTo(REFERENCE);
        }
         break;
      case 16 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (!inComment)
        {
                input_stream.backup(1);
                inComment = true;
                stateStackPush();
                SwitchTo(IN_FORMAL_COMMENT);
        }
         break;
      case 17 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (!inComment)
        {
                inComment=true;
                stateStackPush();
                SwitchTo(IN_MULTI_LINE_COMMENT);
        }
         break;
      case 18 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (!inUnparsed)
        {
                inUnparsed=true;
                stateStackPush();
                SwitchTo(IN_UNPARSED_CONTENT);
        }
         break;
      case 19 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        input_stream.backup(1);
        image.deleteCharAt(image.length() - 1);
        if (!inComment && !inUnparsed)
        {
            /*
             * We can have the situation where #if($foo)$foo#end.
             * We need to transition out of REFERENCE before going to DIRECTIVE.
             * I don't really like this, but I can't think of a legal way
             * you are going into DIRECTIVE while in REFERENCE.  -gmj
             */
            if (curLexState == REFERENCE || curLexState == REFMODIFIER)
            {
                inReference = false;
                stateStackPop();
            }

            inDirective = true;

            if (debugPrint)
                System.out.print("# :  going to " + PRE_DIRECTIVE);

            stateStackPush();
            SwitchTo(PRE_DIRECTIVE);
        }
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!inComment && !inUnparsed)
            lparen++;

        /*
         * If in REFERENCE and we have seen the dot, then move
         * to REFMOD2 -> Modifier()
         */
        if (curLexState == REFMODIFIER)
            SwitchTo(REFMOD2);
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
       RPARENHandler();
         break;
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * need to simply switch back to REFERENCE, not drop down the stack
         * because we can (infinitely) chain, ala
         * $foo.bar().blargh().woogie().doogie()
         */
        SwitchTo(REFERENCE);
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!inComment && !inUnparsed)
        {
            inDirective = true;

            if (debugPrint)
                System.out.print("#set :  going to " + DIRECTIVE);

            stateStackPush();
            inSet = true;
            SwitchTo(DIRECTIVE);
        }

        /*
         *  need the LPAREN action
         */
        if (!inComment && !inUnparsed)
        {
            lparen++;

            /*
             * If in REFERENCE and we have seen the dot, then move
             * to REFMOD2 -> Modifier()
             */
            if (curLexState == REFMODIFIER)
                SwitchTo(REFMOD2);
        }
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!inComment)
        {
            if (curLexState == REFERENCE)
            {
                inReference = false;
                stateStackPop();
            }

            inComment = true;
            stateStackPush();
            SwitchTo(IN_SINGLE_LINE_COMMENT);
        }
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     inComment = false;
     stateStackPop();
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    inComment = false;
    stateStackPop();
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    inComment = false;
    stateStackPop();
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    inUnparsed = false;
    stateStackPop();
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         *  - if we are in DIRECTIVE and haven't seen ( yet, then also drop out.
         *      don't forget to account for the beloved yet wierd #set
         *  - finally, if we are in REFMOD2 (remember : $foo.bar( ) then " is ok!
         */
         if(curLexState == DIRECTIVE && !inSet && lparen == 0)
            stateStackPop();
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (debugPrint)
            System.out.println(" NEWLINE :");

        stateStackPop();

        if (inSet)
            inSet = false;

        if (inDirective)
            inDirective = false;
         break;
      case 51 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        inDirective = false;
        stateStackPop();
         break;
      case 52 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      SwitchTo(DIRECTIVE);
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      /*
       * extract everything afer LPAREN,
       * register macro with the string after LPAREN as name,
       * push every thing after LPAREN back,
       * and munge the image to be everything befor LPAREN
       */
      final String[] astrParts = matchedToken.image.split("\u005c\u005c(");
      VelocityParser.addMacroName(astrParts[1]);
      input_stream.backup(astrParts[1].length() + 1 + (astrParts[0].length() - astrParts[0].trim().length()));
      matchedToken.image = astrParts[0].trim();

      SwitchTo(DIRECTIVE);
         break;
      case 54 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        SwitchTo(DIRECTIVE);
         break;
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        SwitchTo(DIRECTIVE);
         break;
      case 56 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        SwitchTo(DIRECTIVE);
         break;
      case 57 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        inDirective = false;
        stateStackPop();
         break;
      case 58 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        inDirective = false;
        stateStackPop();
         break;
      case 59 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      final String strDirectiveName;
      final boolean fIsBracketedWord;

      if (matchedToken.image.length() > 1)
      {
         if (matchedToken.image.charAt(1) == '{')
         {
            fIsBracketedWord = true;
            strDirectiveName = matchedToken.image.substring(2, image.length() - 1);
         }
         else
         {
            fIsBracketedWord = false;
            strDirectiveName = matchedToken.image.substring(1);
         }

         if (!VelocityParser.isMacro(strDirectiveName))
         {
            if (fIsBracketedWord)
               matchedToken.kind = VelocityParserConstants.BRACKETED_WORD;
            else
               matchedToken.kind = VelocityParserConstants.WORD;
         }
         else
            matchedToken.image = strDirectiveName;
      }

      SwitchTo(DIRECTIVE);
         break;
      case 61 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * Remove the double period if it is there
         */
        if (matchedToken.image.endsWith(".."))
        {
            input_stream.backup(2);
            matchedToken.image = matchedToken.image.substring(0, matchedToken.image.length()-2);
        }

        /*
         * check to see if we are in set
         *    ex.  #set $foo = $foo + 3
         *  because we want to handle the \n after
         */
        if (lparen == 0 && !inSet && curLexState != REFMOD2)
        {
            stateStackPop();
        }
         break;
      case 62 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * check to see if we are in set
         *    ex.  #set $foo = $foo + 3
         *  because we want to handle the \n after
         */
        if (lparen == 0 && !inSet && curLexState != REFMOD2)
        {
            stateStackPop();
        }
         break;
      case 72 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * push the alpha char back into the stream so the following identifier
         * is complete
         */
        input_stream.backup(1);

        /*
         * and munge the <DOT> so we just get a . when we have normal text that
         * looks like a ref.ident
         */
        matchedToken.image = ".";

        if (debugPrint)
            System.out.print("DOT : switching to " + REFMODIFIER);

        SwitchTo(REFMODIFIER);
         break;
      case 74 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        stateStackPop();
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
